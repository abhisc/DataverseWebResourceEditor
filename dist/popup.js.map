{"version":3,"file":"popup.js","mappings":"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","sources":["webpack://dataverse-webresource-editor-v2/./src/popup.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', async () => {\r\n    const environmentNameElem = document.getElementById('environmentName');\r\n    const searchBox = document.getElementById('searchBox');\r\n    const solutionsDropdown = document.getElementById('solutionsDropdown');\r\n    const webResourcesDropdown = document.getElementById('webResourcesDropdown');\r\n    const openEditorButton = document.getElementById('openEditorButton');\r\n    let environmentUrl = '';\r\n    let solutions = [];\r\n    let webResources = [];\r\n  \r\n    // Get the current tab URL\r\n    chrome.tabs.query({ active: true, currentWindow: true }, async (tabs) => {\r\n      const tab = tabs[0];\r\n      const url = new URL(tab.url);\r\n      environmentUrl = `${url.origin}`;\r\n  \r\n      environmentNameElem.textContent = `Environment: ${environmentUrl}`;\r\n  \r\n      // Fetch solutions\r\n      let solutionsData = await fetchSolutions(environmentUrl);\r\n      solutions = solutionsData.value || [];\r\n  \r\n      // Display solutions in dropdown\r\n      displaySolutions(solutions);\r\n  \r\n      // Filter solutions based on search input\r\n      searchBox.addEventListener('input', () => {\r\n        const filteredSolutions = solutions.filter(solution =>\r\n          solution.friendlyname.toLowerCase().includes(searchBox.value.toLowerCase())\r\n        );\r\n        displaySolutions(filteredSolutions);\r\n      });\r\n  \r\n      // Handle solution selection\r\n      solutionsDropdown.addEventListener('change', () => {\r\n        const selectedSolutionId = solutionsDropdown.value;\r\n        webResourcesDropdown.innerHTML = '<option value=\"\">Select a Web Resource</option>';\r\n        openEditorButton.disabled = true;\r\n        if (selectedSolutionId) {\r\n          loadWebResources(selectedSolutionId);\r\n        }\r\n      });\r\n  \r\n      // Handle web resource selection\r\n      webResourcesDropdown.addEventListener('change', () => {\r\n        if (webResourcesDropdown.value) {\r\n          openEditorButton.disabled = false;\r\n        } else {\r\n          openEditorButton.disabled = true;\r\n        }\r\n      });\r\n  \r\n      // Handle \"Open in Editor\" button click\r\n      openEditorButton.addEventListener('click', () => {\r\n        const selectedResourceId = webResourcesDropdown.value;\r\n        const selectedResource = webResources.find(resource => resource.webresourceid === selectedResourceId);\r\n        if (selectedResource) {\r\n          // Open the editor page with the selected resource\r\n          openEditorPage(selectedResource);\r\n        }\r\n      });\r\n    });\r\n  \r\n    // Function to fetch solutions from the environment\r\n    async function fetchSolutions(environmentUrl) {\r\n      try {\r\n        const response = await fetch(`${environmentUrl}/api/data/v9.2/solutions?$select=friendlyname,solutionid`, {\r\n          headers: {\r\n            'OData-MaxVersion': '4.0',\r\n            'OData-Version': '4.0',\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json; charset=utf-8'\r\n          },\r\n          credentials: 'include' // Important for authentication\r\n        });\r\n        return await response.json();\r\n      } catch (error) {\r\n        console.error('Error fetching solutions:', error);\r\n        environmentNameElem.textContent = 'Error fetching solutions.';\r\n        return { value: [] };\r\n      }\r\n    }\r\n  \r\n    // Function to display solutions in the dropdown\r\n    function displaySolutions(solutionsList) {\r\n      // Clear the dropdown options\r\n      solutionsDropdown.innerHTML = '<option value=\"\">Select a Solution</option>';\r\n      solutionsList.forEach(solution => {\r\n        const option = document.createElement('option');\r\n        option.value = solution.solutionid;\r\n        option.textContent = solution.friendlyname;\r\n        solutionsDropdown.appendChild(option);\r\n      });\r\n    }\r\n  \r\n    // Function to load web resources of a solution\r\n    async function loadWebResources(solutionId) {\r\n        webResourcesDropdown.innerHTML = '<option>Loading...</option>';\r\n        try {\r\n          // Build FetchXML query\r\n          const fetchXml = `\r\n            <fetch>\r\n              <entity name=\"webresource\">\r\n                <attribute name=\"name\"/>\r\n                <attribute name=\"webresourceid\"/>\r\n                <attribute name=\"webresourcetype\"/>\r\n                <attribute name=\"content\"/>\r\n                <link-entity name=\"solutioncomponent\" from=\"objectid\" to=\"webresourceid\" alias=\"sc\">\r\n                  <filter>\r\n                    <condition attribute=\"solutionid\" operator=\"eq\" value=\"${solutionId}\"/>\r\n                  </filter>\r\n                </link-entity>\r\n              </entity>\r\n            </fetch>\r\n          `;\r\n          const encodedFetchXml = encodeURIComponent(fetchXml.trim());\r\n          const response = await fetch(`${environmentUrl}/api/data/v9.2/webresourceset?fetchXml=${encodedFetchXml}`, {\r\n            headers: {\r\n              'OData-MaxVersion': '4.0',\r\n              'OData-Version': '4.0',\r\n              'Accept': 'application/json',\r\n              'Content-Type': 'application/json; charset=utf-8'\r\n            },\r\n            credentials: 'include'\r\n          });\r\n      \r\n          // Check if the response is OK\r\n          if (!response.ok) {\r\n            const errorText = await response.text();\r\n            console.error('Error fetching web resources:', response.status, response.statusText, errorText);\r\n            webResourcesDropdown.innerHTML = '<option>Error loading web resources.</option>';\r\n            return;\r\n          }\r\n      \r\n          const webResourcesData = await response.json();\r\n      \r\n          // Log the data to inspect it\r\n          console.log('webResourcesData:', webResourcesData);\r\n      \r\n          // Ensure webResourcesData.value is an array\r\n          if (!Array.isArray(webResourcesData.value)) {\r\n            console.error('webResourcesData.value is not an array:', webResourcesData.value);\r\n            webResourcesDropdown.innerHTML = '<option>Error loading web resources.</option>';\r\n            return;\r\n          }\r\n      \r\n          webResources = webResourcesData.value;\r\n          displayWebResources(webResources);\r\n        } catch (error) {\r\n          console.error('Error fetching web resources:', error);\r\n          webResourcesDropdown.innerHTML = '<option>Error loading web resources.</option>';\r\n        }\r\n      }\r\n          \r\n  \r\n    // Function to display web resources in the dropdown\r\n    function displayWebResources(webResourcesList) {\r\n      webResourcesDropdown.innerHTML = '<option value=\"\">Select a Web Resource</option>';\r\n      if (webResourcesList.length === 0) {\r\n        webResourcesDropdown.innerHTML = '<option>No web resources found.</option>';\r\n        return;\r\n      }\r\n      webResourcesList.forEach(resource => {\r\n        const option = document.createElement('option');\r\n        option.value = resource.webresourceid;\r\n        option.textContent = resource.name;\r\n        webResourcesDropdown.appendChild(option);\r\n      });\r\n    }\r\n  \r\n    // Function to open the editor page with the selected web resource\r\n    function openEditorPage(resource) {\r\n      // Open a new tab with the editor page, passing the resource details via query parameters or storage\r\n      chrome.runtime.sendMessage({\r\n        action: 'openEditor',\r\n        resource: resource,\r\n        environmentUrl: environmentUrl\r\n      });\r\n    }\r\n  });\r\n  "],"names":["document","addEventListener","async","environmentNameElem","getElementById","searchBox","solutionsDropdown","webResourcesDropdown","openEditorButton","environmentUrl","solutions","webResources","displaySolutions","solutionsList","innerHTML","forEach","solution","option","createElement","value","solutionid","textContent","friendlyname","appendChild","chrome","tabs","query","active","currentWindow","tab","url","URL","origin","solutionsData","response","fetch","headers","credentials","json","error","console","fetchSolutions","filter","toLowerCase","includes","selectedSolutionId","disabled","solutionId","fetchXml","encodedFetchXml","encodeURIComponent","trim","ok","errorText","text","status","statusText","webResourcesData","log","Array","isArray","webResourcesList","length","resource","webresourceid","name","loadWebResources","selectedResourceId","selectedResource","find","runtime","sendMessage","action"],"sourceRoot":""}